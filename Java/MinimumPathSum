import java.util.*;

/*Given a m x n grid filled with non-negative numbers,
find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.*/


public class MinimumPathSum{
    public static void main(String[] args) {

        int[][] grid = {
                {1, 3, 1},
                {1, 5, 1},
                {4, 2, 1}
              };
         ans=minPathSum(grid);
        System.out.println(ans);


    }



  static int minPathSum(int[][] grid) {
        int m=grid.length,n=grid[0].length;
        int [][]dp=new int[m][n];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                dp[i][j]+=grid[i][j];
                if(i>0&&j>0)
                    dp[i][j]+=Math.min(dp[i-1][j],dp[i][j-1]);
                else if(i>0)
                    dp[i][j]+=dp[i-1][j];
                else if(j>0)
                    dp[i][j]+=dp[i][j-1];
            }
          //  System.out.println(Arrays.toString(dp[i]));
        }
        //  System.out.println(m+" "+n);
        return dp[m-1][n-1];

    }
}